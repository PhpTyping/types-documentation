{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Types \u00b6 Types is a library that provides a collection of useful primitive wrappers, similar to what other languages can do ( Java, etc). It fixes a few issues some internal functions have, and limits coercion around native PHP functions. Below you will find information about the specific types, and the interfaces they expose. Class Type Description BooleanObject bool Base wrapper around primitive with some custom logical string keyword mappings. Collection array Analogous to Doctrine collections, and implements same interfaces (including Collection interface), but provides Typed Collection functionality. FloatObject float Provides mathematics functionality, can use 3 different drivers. IntObject int Provides mathematics functionality, can use 3 different drivers. StringObject string Extends Stringy using a multi-language inflector and 3rd party slugifier. Enum * enum Extends MyCLabs/Enum and provides a static alias for toArray, syntax sugar for using in attributes. DateTime datetime Extends Carbon with a custom wrapper that can be automatically cast to an ISO 8601 date timestamp. *This class might be deprecated after PHP 8.1 PHP 8.1 is introducing native Enum structures and this class may no longer be needed. Installation \u00b6 Using CLI: composer require typing/types:*@stable Or directly on the composer.json file: { \"require\": { \"typing/types\": \"*@stable\" } } See https://getcomposer.org/ for more information and documentation. Requirements \u00b6 PHP >= 8.0 Optional \u00b6 PHP bcmath PHP gmp Features \u00b6 Rich interfaces exposing native PHP functions while fixing quirks, return values, etc. Multi-byte support Sane transmutation Explicit boxing of variable types, with very limited coercion. To Do \u00b6 Symfony bundle: Configurable extensions for Math in service container What is boxing, and how does it work? \u00b6 Note: Boxing is just a feature in this library, and not something you have to use. Ever since PHP 7.4 we've been able to have strict variable typing at the class level (properties), and method/function level. However, even at the current version (8.0.x) we still cannot have it for variables outside a class, or locally when declared within class methods. This blog post shows examples of how PHP's type system is weak, even when declare(strict_types=1); is called. There are 2 approaches to boxing. You can start with a primitive, and box it to a type, or start with a type and keep a variable boxed into that type. Examples : Starting as a type... $myString = new StringObject(''); StringObject::box($myString); $myString = 'my_new_value'; // This is still an instance of StringObject. $myString->dasherize(); // my-new-value $myString = new stdClass(); // TypeError. Starting as a primitive... $myString = 'This is my string, there are many like it, but this one is mine.'; StringObject::box($myString); assert($myString instanceof StringObject); // true $myString->dasherize(); // this-is-my-string... $myString = new stdClass(); // TypeError. In an ideal world, we would do something similar to typescript, or python and the language would auto-box: Error: $myString: StringObject = new StringObject(); $myString = new stdClass(); // TypeError Auto: $myString: StringObject = new StringObject('noop'); $myString = 'fooBarBaz'; echo $myString->dasherize(); //foo-bar-baz License \u00b6 This library is released under the MIT license. See the complete license in the LICENSE file. Contact \u00b6 Use the buttons below for issues regarding the library. Report Issue Active Issues For other issues, reach out to vpassapera [at] linkedin [dot] com.","title":"Home"},{"location":"index.html#types","text":"Types is a library that provides a collection of useful primitive wrappers, similar to what other languages can do ( Java, etc). It fixes a few issues some internal functions have, and limits coercion around native PHP functions. Below you will find information about the specific types, and the interfaces they expose. Class Type Description BooleanObject bool Base wrapper around primitive with some custom logical string keyword mappings. Collection array Analogous to Doctrine collections, and implements same interfaces (including Collection interface), but provides Typed Collection functionality. FloatObject float Provides mathematics functionality, can use 3 different drivers. IntObject int Provides mathematics functionality, can use 3 different drivers. StringObject string Extends Stringy using a multi-language inflector and 3rd party slugifier. Enum * enum Extends MyCLabs/Enum and provides a static alias for toArray, syntax sugar for using in attributes. DateTime datetime Extends Carbon with a custom wrapper that can be automatically cast to an ISO 8601 date timestamp. *This class might be deprecated after PHP 8.1 PHP 8.1 is introducing native Enum structures and this class may no longer be needed.","title":"Types"},{"location":"index.html#installation","text":"Using CLI: composer require typing/types:*@stable Or directly on the composer.json file: { \"require\": { \"typing/types\": \"*@stable\" } } See https://getcomposer.org/ for more information and documentation.","title":"Installation"},{"location":"index.html#requirements","text":"PHP >= 8.0","title":"Requirements"},{"location":"index.html#optional","text":"PHP bcmath PHP gmp","title":"Optional"},{"location":"index.html#features","text":"Rich interfaces exposing native PHP functions while fixing quirks, return values, etc. Multi-byte support Sane transmutation Explicit boxing of variable types, with very limited coercion.","title":"Features"},{"location":"index.html#to-do","text":"Symfony bundle: Configurable extensions for Math in service container","title":"To Do"},{"location":"index.html#what-is-boxing-and-how-does-it-work","text":"Note: Boxing is just a feature in this library, and not something you have to use. Ever since PHP 7.4 we've been able to have strict variable typing at the class level (properties), and method/function level. However, even at the current version (8.0.x) we still cannot have it for variables outside a class, or locally when declared within class methods. This blog post shows examples of how PHP's type system is weak, even when declare(strict_types=1); is called. There are 2 approaches to boxing. You can start with a primitive, and box it to a type, or start with a type and keep a variable boxed into that type. Examples : Starting as a type... $myString = new StringObject(''); StringObject::box($myString); $myString = 'my_new_value'; // This is still an instance of StringObject. $myString->dasherize(); // my-new-value $myString = new stdClass(); // TypeError. Starting as a primitive... $myString = 'This is my string, there are many like it, but this one is mine.'; StringObject::box($myString); assert($myString instanceof StringObject); // true $myString->dasherize(); // this-is-my-string... $myString = new stdClass(); // TypeError. In an ideal world, we would do something similar to typescript, or python and the language would auto-box: Error: $myString: StringObject = new StringObject(); $myString = new stdClass(); // TypeError Auto: $myString: StringObject = new StringObject('noop'); $myString = 'fooBarBaz'; echo $myString->dasherize(); //foo-bar-baz","title":"What is boxing, and how does it work?"},{"location":"index.html#license","text":"This library is released under the MIT license. See the complete license in the LICENSE file.","title":"License"},{"location":"index.html#contact","text":"Use the buttons below for issues regarding the library. Report Issue Active Issues For other issues, reach out to vpassapera [at] linkedin [dot] com.","title":"Contact"},{"location":"license.html","text":"MIT License Copyright (c) 2021 PhpTyping Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"types/bool-object.html","text":"BooleanObject \u00b6 Primitive Type: bool , boolean Usage \u00b6 Provides a specific map of strings that can map to boolean. This is useful when dealing with classes that provide boolean values as strings, such as Symfony's Command and QueryParam components. Example <?php namespace Foo; use Typing\\Type\\BooleanObject; $bool = new BooleanObject(true); assert $bool->isTrue(); $string = $bool->toString(); //'true' BooleanObject::box($bool); $bool = 7; // Throws TypeError $fromString = BooleanObject::fromPrimitive('yes'); //'true', 'yes','1', 'on' => true, 'no', 'off', 'false', '0' => false $fromString = new BooleanObject('on'); // true $errorString = BooleanObject::fromPrimitive('is_this_really_bool?'); //TypeError String Map public const STRING_MAP = [ 'true' => true, 'on' => true, 'yes' => true, '1' => true, 'no' => false, 'off' => false, 'false' => false, '0' => false, ]; Methods \u00b6 Instance \u00b6 isTrue \u00b6 Returns true when the current value is identical to true . isTrue(): bool Usage : $isMyBool = new BoolObject(true); assert($isMyBool->isTrue()); // true isFalse \u00b6 Returns true when the current value is identical to false . isFalse(): bool Usage : $isMyBool = new BoolObject(true); assert($isMyBool->isFalse()); // false getScalarValue \u00b6 Returns the current scalar value true or false . getScalarValue(): bool Usage : $isMyBool = new BoolObject(true); assert(true === $isMyBool->getScalarValue()); // true toString \u00b6 Returns the current scalar value as a string ( 'true' , or 'false' ). toString(): string Usage : $isMyBool = new BoolObject(true); assert('true' === $isMyBool->toString()); // true toInt \u00b6 Returns 1 for true and 0 for false . toInt(): int Usage : $isMyBool = new BoolObject(true); assert(1 === $isMyBool->toInt()); // true Static \u00b6 box \u00b6 Boxes a given variable to FloatObject instances. ::box(mixed &$pointer) Usage : $isMyBool = new BoolObject(true); BoolObject::box($isMyBool); assert($isMyBool instanceof BoolObject); // true $isMyBool = 'uhoh'; // TypeError fromPrimitive \u00b6 Attempts to create a BoolObject from a primitive value. ::fromPrimitive(mixed $mixed): BoolObject Usage : $isMyBool = BoolObject::fromPrimitive('on'); assert($isMyBool instanceof FloatObject); // true assert($isMyBool->isTrue()); // true","title":"BooleanObject"},{"location":"types/bool-object.html#booleanobject","text":"Primitive Type: bool , boolean","title":"BooleanObject"},{"location":"types/bool-object.html#usage","text":"Provides a specific map of strings that can map to boolean. This is useful when dealing with classes that provide boolean values as strings, such as Symfony's Command and QueryParam components. Example <?php namespace Foo; use Typing\\Type\\BooleanObject; $bool = new BooleanObject(true); assert $bool->isTrue(); $string = $bool->toString(); //'true' BooleanObject::box($bool); $bool = 7; // Throws TypeError $fromString = BooleanObject::fromPrimitive('yes'); //'true', 'yes','1', 'on' => true, 'no', 'off', 'false', '0' => false $fromString = new BooleanObject('on'); // true $errorString = BooleanObject::fromPrimitive('is_this_really_bool?'); //TypeError String Map public const STRING_MAP = [ 'true' => true, 'on' => true, 'yes' => true, '1' => true, 'no' => false, 'off' => false, 'false' => false, '0' => false, ];","title":"Usage"},{"location":"types/bool-object.html#methods","text":"","title":"Methods"},{"location":"types/bool-object.html#instance","text":"","title":"Instance"},{"location":"types/bool-object.html#istrue","text":"Returns true when the current value is identical to true . isTrue(): bool Usage : $isMyBool = new BoolObject(true); assert($isMyBool->isTrue()); // true","title":"isTrue"},{"location":"types/bool-object.html#isfalse","text":"Returns true when the current value is identical to false . isFalse(): bool Usage : $isMyBool = new BoolObject(true); assert($isMyBool->isFalse()); // false","title":"isFalse"},{"location":"types/bool-object.html#getscalarvalue","text":"Returns the current scalar value true or false . getScalarValue(): bool Usage : $isMyBool = new BoolObject(true); assert(true === $isMyBool->getScalarValue()); // true","title":"getScalarValue"},{"location":"types/bool-object.html#tostring","text":"Returns the current scalar value as a string ( 'true' , or 'false' ). toString(): string Usage : $isMyBool = new BoolObject(true); assert('true' === $isMyBool->toString()); // true","title":"toString"},{"location":"types/bool-object.html#toint","text":"Returns 1 for true and 0 for false . toInt(): int Usage : $isMyBool = new BoolObject(true); assert(1 === $isMyBool->toInt()); // true","title":"toInt"},{"location":"types/bool-object.html#static","text":"","title":"Static"},{"location":"types/bool-object.html#box","text":"Boxes a given variable to FloatObject instances. ::box(mixed &$pointer) Usage : $isMyBool = new BoolObject(true); BoolObject::box($isMyBool); assert($isMyBool instanceof BoolObject); // true $isMyBool = 'uhoh'; // TypeError","title":"box"},{"location":"types/bool-object.html#fromprimitive","text":"Attempts to create a BoolObject from a primitive value. ::fromPrimitive(mixed $mixed): BoolObject Usage : $isMyBool = BoolObject::fromPrimitive('on'); assert($isMyBool instanceof FloatObject); // true assert($isMyBool->isTrue()); // true","title":"fromPrimitive"},{"location":"types/collection.html","text":"Collection \u00b6 Primitive Type: array Credits \u00b6 Doctrine Collection Implementation This class implements an extended Collection interface, and has extends on the ArrayCollection implementation. Usage \u00b6 Provides a wrapper around arrays that exposes most if not all native array functions. Also implements the following interfaces: Native Countable IteratorAggregate ArrayAccess Vendor Library Doctrine\\Common\\Collections\\Collection Library Typing\\Type\\TypedCollectionInterface Example <?php namespace Foo; use Doctrine\\Common\\Collections\\Collection as CollectionInterface; use Typing\\Type\\Collection; use Typing\\Type\\TypedCollectionInterface; use Typing\\Type\\StringObject; $typedCollection = new Collection(['foo', 'bar'], StringObject::class); // A collection of StringObjects assert($typedCollection instanceof CollectionInterface); // true assert($typedCollection instanceof TypedCollectionInterface); // true foreach ($typedCollection as $stringObject) { echo $stringObject->classify(), PHP_EOL; // Prints: // Foo // Bar assert($stringObject instanceof StringObject); // True } $typedPrimitiveCollection = new Collection([true, false, true], 'string'); // Error Methods \u00b6 Instance \u00b6 unshift \u00b6 first \u00b6 last \u00b6 isAssociative \u00b6 key \u00b6 next \u00b6 current \u00b6 remove \u00b6 removeElement \u00b6 offsetExists \u00b6 offsetGet \u00b6 offsetSet \u00b6 offsetUnset \u00b6 containsKey \u00b6 contains \u00b6 exists \u00b6 indexOf \u00b6 get \u00b6 getKeys \u00b6 getValues \u00b6 count \u00b6 set \u00b6 add \u00b6 isEmpty \u00b6 getIterator \u00b6 map \u00b6 filter \u00b6 forAll \u00b6 partition \u00b6 clear \u00b6 slice \u00b6 matching \u00b6 unique \u00b6 merge \u00b6 implode \u00b6 toArray \u00b6 getType \u00b6 isTyped \u00b6 isOfType \u00b6 hasType \u00b6 Static \u00b6 box \u00b6 Boxes a given variable to a Collection instance. Any value assigned to the boxed variable behaves as PHP normally does, by creating an array and passing that value as the first element, except it does to as a collection instead of an array. ::box(mixed &$pointer) Usage : $collection = new Collection([]); Collection::box($collection); $collection = ['my', 'new', 'collection']; assert($collection instanceof Collection); // true assert(3 === $collection->count()); // true $collection = new stdClass(); // == new Collection([new stdClass()]) assert(1 === $collection->count()); // true assert(stdClass::class === $collection->getType()); // true fromPrimitive \u00b6 Attempts to create a BoolObject from a primitive value. ::fromPrimitive(mixed $mixed): Collection Usage : $collection = Collection::fromPrimitive('foo'); assert($collection instanceof Collection); // true assert(1 === $collection->count()); // true","title":"Collection"},{"location":"types/collection.html#collection","text":"Primitive Type: array","title":"Collection"},{"location":"types/collection.html#credits","text":"Doctrine Collection Implementation This class implements an extended Collection interface, and has extends on the ArrayCollection implementation.","title":"Credits"},{"location":"types/collection.html#usage","text":"Provides a wrapper around arrays that exposes most if not all native array functions. Also implements the following interfaces: Native Countable IteratorAggregate ArrayAccess Vendor Library Doctrine\\Common\\Collections\\Collection Library Typing\\Type\\TypedCollectionInterface Example <?php namespace Foo; use Doctrine\\Common\\Collections\\Collection as CollectionInterface; use Typing\\Type\\Collection; use Typing\\Type\\TypedCollectionInterface; use Typing\\Type\\StringObject; $typedCollection = new Collection(['foo', 'bar'], StringObject::class); // A collection of StringObjects assert($typedCollection instanceof CollectionInterface); // true assert($typedCollection instanceof TypedCollectionInterface); // true foreach ($typedCollection as $stringObject) { echo $stringObject->classify(), PHP_EOL; // Prints: // Foo // Bar assert($stringObject instanceof StringObject); // True } $typedPrimitiveCollection = new Collection([true, false, true], 'string'); // Error","title":"Usage"},{"location":"types/collection.html#methods","text":"","title":"Methods"},{"location":"types/collection.html#instance","text":"","title":"Instance"},{"location":"types/collection.html#unshift","text":"","title":"unshift"},{"location":"types/collection.html#first","text":"","title":"first"},{"location":"types/collection.html#last","text":"","title":"last"},{"location":"types/collection.html#isassociative","text":"","title":"isAssociative"},{"location":"types/collection.html#key","text":"","title":"key"},{"location":"types/collection.html#next","text":"","title":"next"},{"location":"types/collection.html#current","text":"","title":"current"},{"location":"types/collection.html#remove","text":"","title":"remove"},{"location":"types/collection.html#removeelement","text":"","title":"removeElement"},{"location":"types/collection.html#offsetexists","text":"","title":"offsetExists"},{"location":"types/collection.html#offsetget","text":"","title":"offsetGet"},{"location":"types/collection.html#offsetset","text":"","title":"offsetSet"},{"location":"types/collection.html#offsetunset","text":"","title":"offsetUnset"},{"location":"types/collection.html#containskey","text":"","title":"containsKey"},{"location":"types/collection.html#contains","text":"","title":"contains"},{"location":"types/collection.html#exists","text":"","title":"exists"},{"location":"types/collection.html#indexof","text":"","title":"indexOf"},{"location":"types/collection.html#get","text":"","title":"get"},{"location":"types/collection.html#getkeys","text":"","title":"getKeys"},{"location":"types/collection.html#getvalues","text":"","title":"getValues"},{"location":"types/collection.html#count","text":"","title":"count"},{"location":"types/collection.html#set","text":"","title":"set"},{"location":"types/collection.html#add","text":"","title":"add"},{"location":"types/collection.html#isempty","text":"","title":"isEmpty"},{"location":"types/collection.html#getiterator","text":"","title":"getIterator"},{"location":"types/collection.html#map","text":"","title":"map"},{"location":"types/collection.html#filter","text":"","title":"filter"},{"location":"types/collection.html#forall","text":"","title":"forAll"},{"location":"types/collection.html#partition","text":"","title":"partition"},{"location":"types/collection.html#clear","text":"","title":"clear"},{"location":"types/collection.html#slice","text":"","title":"slice"},{"location":"types/collection.html#matching","text":"","title":"matching"},{"location":"types/collection.html#unique","text":"","title":"unique"},{"location":"types/collection.html#merge","text":"","title":"merge"},{"location":"types/collection.html#implode","text":"","title":"implode"},{"location":"types/collection.html#toarray","text":"","title":"toArray"},{"location":"types/collection.html#gettype","text":"","title":"getType"},{"location":"types/collection.html#istyped","text":"","title":"isTyped"},{"location":"types/collection.html#isoftype","text":"","title":"isOfType"},{"location":"types/collection.html#hastype","text":"","title":"hasType"},{"location":"types/collection.html#static","text":"","title":"Static"},{"location":"types/collection.html#box","text":"Boxes a given variable to a Collection instance. Any value assigned to the boxed variable behaves as PHP normally does, by creating an array and passing that value as the first element, except it does to as a collection instead of an array. ::box(mixed &$pointer) Usage : $collection = new Collection([]); Collection::box($collection); $collection = ['my', 'new', 'collection']; assert($collection instanceof Collection); // true assert(3 === $collection->count()); // true $collection = new stdClass(); // == new Collection([new stdClass()]) assert(1 === $collection->count()); // true assert(stdClass::class === $collection->getType()); // true","title":"box"},{"location":"types/collection.html#fromprimitive","text":"Attempts to create a BoolObject from a primitive value. ::fromPrimitive(mixed $mixed): Collection Usage : $collection = Collection::fromPrimitive('foo'); assert($collection instanceof Collection); // true assert(1 === $collection->count()); // true","title":"fromPrimitive"},{"location":"types/date-time.html","text":"DateTime \u00b6 Primitive Type: N/A Credits \u00b6 This is just a meta-class for Carbon with boxing support. Documentation: https://carbon.nesbot.com/docs/ Usage \u00b6 Usage is the same as a carbon class. Example <?php namespace Foo; use Typing\\Type\\DateTime; $myDate = new DateTime(); DateTime::box($myDate); $myDate = '2021-01-01'; assert($myDate instanceof DateTime); // True Methods \u00b6 Static \u00b6 box \u00b6 Boxes a given variable to a DateTime instance. ::box(mixed &$pointer) Usage : use Typing\\Type\\DateTime; $date = new DateTime(); DateTime::box($date); $date = '2021-01-05'; assert($date instanceof DateTime); // true $date = false; // TypeError fromPrimitive \u00b6 Attempts to create a DateTime from a primitive value. ::fromPrimitive(mixed $mixed): Collection Usage : $date = DateTime::fromPrimitive('2021-01-01'); assert($date instanceof DateTime); // true $date = DateTime::fromPrimitive(111); // TypeError","title":"DateTime"},{"location":"types/date-time.html#datetime","text":"Primitive Type: N/A","title":"DateTime"},{"location":"types/date-time.html#credits","text":"This is just a meta-class for Carbon with boxing support. Documentation: https://carbon.nesbot.com/docs/","title":"Credits"},{"location":"types/date-time.html#usage","text":"Usage is the same as a carbon class. Example <?php namespace Foo; use Typing\\Type\\DateTime; $myDate = new DateTime(); DateTime::box($myDate); $myDate = '2021-01-01'; assert($myDate instanceof DateTime); // True","title":"Usage"},{"location":"types/date-time.html#methods","text":"","title":"Methods"},{"location":"types/date-time.html#static","text":"","title":"Static"},{"location":"types/date-time.html#box","text":"Boxes a given variable to a DateTime instance. ::box(mixed &$pointer) Usage : use Typing\\Type\\DateTime; $date = new DateTime(); DateTime::box($date); $date = '2021-01-05'; assert($date instanceof DateTime); // true $date = false; // TypeError","title":"box"},{"location":"types/date-time.html#fromprimitive","text":"Attempts to create a DateTime from a primitive value. ::fromPrimitive(mixed $mixed): Collection Usage : $date = DateTime::fromPrimitive('2021-01-01'); assert($date instanceof DateTime); // true $date = DateTime::fromPrimitive(111); // TypeError","title":"fromPrimitive"},{"location":"types/enum.html","text":"Enum \u00b6 PHP 8.1 will have native Enums PHP 8.1 is introducing native Enum structures and this class may have to be re-implemented or not needed at all. Primitive Type: N/A Credits \u00b6 This is just a meta-class for php-enum. Documentation: https://github.com/myclabs/php-enum#documentation Usage \u00b6 Usage is the same as base class. Example <?php namespace Foo; use Typing\\Type\\Enum; /** * Class MyEnum. * * @method static self PENDING() * @method static self RUNNING() * @method static self FINISHED() */ final class Status extends Enum { private const PENDING = 'pending'; private const RUNNING = 'running'; private const FINISHED = 'finished'; } ... $currentStatus = Status::PENDING(); echo $currentStatus; // 'pending' Or in Symfony Validator component attributes #[Assert\\NotBlank(message: 'A status is required.')] #[Assert\\Choice(callback: [Status::class, 'toArray'])] private string $status;","title":"Enum"},{"location":"types/enum.html#enum","text":"PHP 8.1 will have native Enums PHP 8.1 is introducing native Enum structures and this class may have to be re-implemented or not needed at all. Primitive Type: N/A","title":"Enum"},{"location":"types/enum.html#credits","text":"This is just a meta-class for php-enum. Documentation: https://github.com/myclabs/php-enum#documentation","title":"Credits"},{"location":"types/enum.html#usage","text":"Usage is the same as base class. Example <?php namespace Foo; use Typing\\Type\\Enum; /** * Class MyEnum. * * @method static self PENDING() * @method static self RUNNING() * @method static self FINISHED() */ final class Status extends Enum { private const PENDING = 'pending'; private const RUNNING = 'running'; private const FINISHED = 'finished'; } ... $currentStatus = Status::PENDING(); echo $currentStatus; // 'pending' Or in Symfony Validator component attributes #[Assert\\NotBlank(message: 'A status is required.')] #[Assert\\Choice(callback: [Status::class, 'toArray'])] private string $status;","title":"Usage"},{"location":"types/float-object.html","text":"FloatObject \u00b6 Primitive Type: float , double , long Usage \u00b6 Provides an interface for a lot of internal operations and functions on floats. Example use Typing\\Type\\FloatObject; use Exception; $float = new FloatObject(4.5); if (8.0 !== $float->plus(3.5)->getScalarValue()) { throw new Exception('Bad math!'); } Extensions \u00b6 This section is optional. If you don't care about customizing the extensions, simply go on to the methods section. By default, the order of extension loading is as follows: /** * @return MathLibraryInterface[] */ protected function getDefaultDelegates(): array { //Array is sorted in order of preference. Override in child class if so desired. return [ 'bcmath' => new BcMath($this->getRoundingStrategy()), 'gmp' => new Gmp(), 'spl' => new Spl($this->getRoundingStrategy()), ]; } You do not need to actually have any of these extensions installed. If one fails, or is not enabled,it will simply go to the next, behaving like a chain, until it finds a library that can perform the operation. If you want to only use specific libraries when using NumberTypes (Float | Int), then you need to pass it an instance of a MathAdapter that only contains those libraries. use Typing\\Math\\DefaultMathAdapter; use Typing\\Math\\Library\\BcMath; use Typing\\Math\\Library\\MathLibraryInterface; use Typing\\Math\\Library\\Spl; use Typing\\Type\\Collection; $libraries = new Collection(array: [ new BcMath(), new Spl(), ], type: MathLibraryInterface::class); $adapter = new DefaultMathAdapter(delegates: $libraries) $float = new FloatObject(float: 5.0, adapter: $adapter); I am working on implementing a symfony bundle, so the library can be customized without so much verbosity. For other frameworks, PRs are welcome! BCMath \u00b6 Make sure the BCMath extension (often php-bcmath ) is installed and enabled if you'd like FloatObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes. Gmp \u00b6 Make sure the GMP extension (often php-gmp ) is installed and enabled if you'd like FloatObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes. Spl \u00b6 This is just standard php arithmetic without any special operations. Methods \u00b6 Instance \u00b6 plus \u00b6 Adds a number to the current instance. plus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(3.0); assert(6.2 == $float->plus(3.2)->getScalarValue()); // true minus \u00b6 Subtracts a number from the current instance. minus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(7.0); assert(2.8 == $float->minus(4.2)->getScalarValue()); // true multipliedBy \u00b6 Multiplies the current instance by a number. multipliedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(2.0); assert(20.0 == $float->multipliedBy(10)->getScalarValue()); // true dividedBy \u00b6 Divides the current instance by a number. dividedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(10.0); assert(2.0 == $float->dividedBy(5)->getScalarValue()); // true compare \u00b6 Compares the current instance to the param passed. Same rules as spaceship <=> or version_compare for return values. compare(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(10.0); assert(1 == $float->compare(5)->getScalarValue()); // true modulo \u00b6 Returns the remainder of the instance divided by the param. modulo(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(55.3); assert(5.3 == $float->modulo(10)->getScalarValue()); // true $float = new FloatObject(10.0); assert (0 == $float->modulo(2)->getScalarValue()); // true power \u00b6 Returns instance to the power of param. power(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true squareRoot \u00b6 Returns the instance's square root. squareRoot(): NumberObjectInterface; Usage : $float = new FloatObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true absolute \u00b6 Returns the instance's absolute value. absolute(): NumberObjectInterface; Usage : $float = new FloatObject(-15.5); assert(15.5 == $float->absolute()->getScalarValue()); // true negate \u00b6 Returns the instance's opposite value. negate(): NumberObjectInterface; Usage : $float = new FloatObject(-15.5); assert(15.5 == $float->negate()->getScalarValue()); // true $float = new FloatObject(77.5); assert(-77.5 == $float->negate()->getScalarValue()); // true factorial \u00b6 Returns the factorial value for instance. Arguments must be whole, positive numbers. factorial(): NumberObjectInterface; Usage : $float = new FloatObject(10.0); assert(3628800 == $float->factorial()->getScalarValue()); // true $float = new FloatObject(10.1); $float->factorial(); // InvalidNumberException $float = new FloatObject(-10.0); $float->factorial(); // InvalidNumberException gcd \u00b6 Returns the greatest common divider between the current instance and argument. gcd(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true root \u00b6 Extension Required php-gmp must be installed for this method to work. Takes the nth root of the current instance and returns the integer component of the result. root(int $num): NumberObjectInterface Usage : $float = new FloatObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true getNextPrime \u00b6 Return the next prime number after current instance's value. getNextPrime(): NumberObjectInterface; Usage : $float = new FloatObject(5.0); assert(7 == $float->getNextPrime()->getScalarValue()); // true isPrime \u00b6 Returns true if the current instance is a prime number. isPrime(): bool; Usage : $float = new FloatObject(5.0); assert($float->isPrime()); // true $float = new FloatObject(6.0); assert($float->isPrime()); // false isPerfectSquare \u00b6 Returns true if the current instance is a perfect square. isPerfectSquare(): bool; Usage : $float = new FloatObject(4.0); assert($float->isPerfectSquare()); // true $float = new FloatObject(6.0); assert($float->isPerfectSquare()); // false $float = new FloatObject(9.0); assert($float->isPerfectSquare()); // true getPrecision \u00b6 Gets the current precision. If null was passed, then it calculates the precision. getPrecision(): int; Usage : $float = new FloatObject(4.0); assert(1 === $float->getPrecision()); // true $float = new FloatObject(6.038); assert(3 === $float->getPrecision()); // false $float = new FloatObject(9.0); assert($float->isPerfectSquare()); // true toIntObject \u00b6 Converts the current instance to an IntObject. toIntObject(): IntObject; Usage : $float = new FloatObject(4.05); assert(new IntObject(4) == $float->toIntObject()); // true toInt \u00b6 Converts the current instance to a primitive int. toInt(): int; Usage : $float = new FloatObject(4.04); assert(4 === $float->toInt()); // true toStringObject \u00b6 Converts the current instance to a StringObject. toStringObject(): StringObject; Usage : $float = new FloatObject(4.05); assert(new StringObject('4.05') == $float->toStringObject()); // true toString \u00b6 Converts the current instance to a primitive string. toString(): string; Usage : $float = new FloatObject(4.04); assert('4.04' === $float->toString()); // true Static \u00b6 box \u00b6 Boxes a given variable to FloatObject instances. ::box(mixed &$pointer) Usage : $float = new FloatObject(4.04); FloatObject::box($float); $float = 7.77; assert($float instanceof FloatObject); // true $float = false; // TypeError fromPrimitive \u00b6 Attempts to create a FloatObject from a primitive value. Throws error if non_numeric passed. ::fromPrimitive(mixed $mixed, ?int $precision = null): FloatObject Usage : $float = FloatObject::fromPrimitive('4.04'); assert($float instanceof FloatObject); // true $float = FloatObject::fromPrimitive(false); // TypeError","title":"FloatObject"},{"location":"types/float-object.html#floatobject","text":"Primitive Type: float , double , long","title":"FloatObject"},{"location":"types/float-object.html#usage","text":"Provides an interface for a lot of internal operations and functions on floats. Example use Typing\\Type\\FloatObject; use Exception; $float = new FloatObject(4.5); if (8.0 !== $float->plus(3.5)->getScalarValue()) { throw new Exception('Bad math!'); }","title":"Usage"},{"location":"types/float-object.html#extensions","text":"This section is optional. If you don't care about customizing the extensions, simply go on to the methods section. By default, the order of extension loading is as follows: /** * @return MathLibraryInterface[] */ protected function getDefaultDelegates(): array { //Array is sorted in order of preference. Override in child class if so desired. return [ 'bcmath' => new BcMath($this->getRoundingStrategy()), 'gmp' => new Gmp(), 'spl' => new Spl($this->getRoundingStrategy()), ]; } You do not need to actually have any of these extensions installed. If one fails, or is not enabled,it will simply go to the next, behaving like a chain, until it finds a library that can perform the operation. If you want to only use specific libraries when using NumberTypes (Float | Int), then you need to pass it an instance of a MathAdapter that only contains those libraries. use Typing\\Math\\DefaultMathAdapter; use Typing\\Math\\Library\\BcMath; use Typing\\Math\\Library\\MathLibraryInterface; use Typing\\Math\\Library\\Spl; use Typing\\Type\\Collection; $libraries = new Collection(array: [ new BcMath(), new Spl(), ], type: MathLibraryInterface::class); $adapter = new DefaultMathAdapter(delegates: $libraries) $float = new FloatObject(float: 5.0, adapter: $adapter); I am working on implementing a symfony bundle, so the library can be customized without so much verbosity. For other frameworks, PRs are welcome!","title":"Extensions"},{"location":"types/float-object.html#bcmath","text":"Make sure the BCMath extension (often php-bcmath ) is installed and enabled if you'd like FloatObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes.","title":"BCMath"},{"location":"types/float-object.html#gmp","text":"Make sure the GMP extension (often php-gmp ) is installed and enabled if you'd like FloatObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes.","title":"Gmp"},{"location":"types/float-object.html#spl","text":"This is just standard php arithmetic without any special operations.","title":"Spl"},{"location":"types/float-object.html#methods","text":"","title":"Methods"},{"location":"types/float-object.html#instance","text":"","title":"Instance"},{"location":"types/float-object.html#plus","text":"Adds a number to the current instance. plus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(3.0); assert(6.2 == $float->plus(3.2)->getScalarValue()); // true","title":"plus"},{"location":"types/float-object.html#minus","text":"Subtracts a number from the current instance. minus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(7.0); assert(2.8 == $float->minus(4.2)->getScalarValue()); // true","title":"minus"},{"location":"types/float-object.html#multipliedby","text":"Multiplies the current instance by a number. multipliedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(2.0); assert(20.0 == $float->multipliedBy(10)->getScalarValue()); // true","title":"multipliedBy"},{"location":"types/float-object.html#dividedby","text":"Divides the current instance by a number. dividedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(10.0); assert(2.0 == $float->dividedBy(5)->getScalarValue()); // true","title":"dividedBy"},{"location":"types/float-object.html#compare","text":"Compares the current instance to the param passed. Same rules as spaceship <=> or version_compare for return values. compare(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(10.0); assert(1 == $float->compare(5)->getScalarValue()); // true","title":"compare"},{"location":"types/float-object.html#modulo","text":"Returns the remainder of the instance divided by the param. modulo(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(55.3); assert(5.3 == $float->modulo(10)->getScalarValue()); // true $float = new FloatObject(10.0); assert (0 == $float->modulo(2)->getScalarValue()); // true","title":"modulo"},{"location":"types/float-object.html#power","text":"Returns instance to the power of param. power(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true","title":"power"},{"location":"types/float-object.html#squareroot","text":"Returns the instance's square root. squareRoot(): NumberObjectInterface; Usage : $float = new FloatObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true","title":"squareRoot"},{"location":"types/float-object.html#absolute","text":"Returns the instance's absolute value. absolute(): NumberObjectInterface; Usage : $float = new FloatObject(-15.5); assert(15.5 == $float->absolute()->getScalarValue()); // true","title":"absolute"},{"location":"types/float-object.html#negate","text":"Returns the instance's opposite value. negate(): NumberObjectInterface; Usage : $float = new FloatObject(-15.5); assert(15.5 == $float->negate()->getScalarValue()); // true $float = new FloatObject(77.5); assert(-77.5 == $float->negate()->getScalarValue()); // true","title":"negate"},{"location":"types/float-object.html#factorial","text":"Returns the factorial value for instance. Arguments must be whole, positive numbers. factorial(): NumberObjectInterface; Usage : $float = new FloatObject(10.0); assert(3628800 == $float->factorial()->getScalarValue()); // true $float = new FloatObject(10.1); $float->factorial(); // InvalidNumberException $float = new FloatObject(-10.0); $float->factorial(); // InvalidNumberException","title":"factorial"},{"location":"types/float-object.html#gcd","text":"Returns the greatest common divider between the current instance and argument. gcd(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new FloatObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true","title":"gcd"},{"location":"types/float-object.html#root","text":"Extension Required php-gmp must be installed for this method to work. Takes the nth root of the current instance and returns the integer component of the result. root(int $num): NumberObjectInterface Usage : $float = new FloatObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true","title":"root"},{"location":"types/float-object.html#getnextprime","text":"Return the next prime number after current instance's value. getNextPrime(): NumberObjectInterface; Usage : $float = new FloatObject(5.0); assert(7 == $float->getNextPrime()->getScalarValue()); // true","title":"getNextPrime"},{"location":"types/float-object.html#isprime","text":"Returns true if the current instance is a prime number. isPrime(): bool; Usage : $float = new FloatObject(5.0); assert($float->isPrime()); // true $float = new FloatObject(6.0); assert($float->isPrime()); // false","title":"isPrime"},{"location":"types/float-object.html#isperfectsquare","text":"Returns true if the current instance is a perfect square. isPerfectSquare(): bool; Usage : $float = new FloatObject(4.0); assert($float->isPerfectSquare()); // true $float = new FloatObject(6.0); assert($float->isPerfectSquare()); // false $float = new FloatObject(9.0); assert($float->isPerfectSquare()); // true","title":"isPerfectSquare"},{"location":"types/float-object.html#getprecision","text":"Gets the current precision. If null was passed, then it calculates the precision. getPrecision(): int; Usage : $float = new FloatObject(4.0); assert(1 === $float->getPrecision()); // true $float = new FloatObject(6.038); assert(3 === $float->getPrecision()); // false $float = new FloatObject(9.0); assert($float->isPerfectSquare()); // true","title":"getPrecision"},{"location":"types/float-object.html#tointobject","text":"Converts the current instance to an IntObject. toIntObject(): IntObject; Usage : $float = new FloatObject(4.05); assert(new IntObject(4) == $float->toIntObject()); // true","title":"toIntObject"},{"location":"types/float-object.html#toint","text":"Converts the current instance to a primitive int. toInt(): int; Usage : $float = new FloatObject(4.04); assert(4 === $float->toInt()); // true","title":"toInt"},{"location":"types/float-object.html#tostringobject","text":"Converts the current instance to a StringObject. toStringObject(): StringObject; Usage : $float = new FloatObject(4.05); assert(new StringObject('4.05') == $float->toStringObject()); // true","title":"toStringObject"},{"location":"types/float-object.html#tostring","text":"Converts the current instance to a primitive string. toString(): string; Usage : $float = new FloatObject(4.04); assert('4.04' === $float->toString()); // true","title":"toString"},{"location":"types/float-object.html#static","text":"","title":"Static"},{"location":"types/float-object.html#box","text":"Boxes a given variable to FloatObject instances. ::box(mixed &$pointer) Usage : $float = new FloatObject(4.04); FloatObject::box($float); $float = 7.77; assert($float instanceof FloatObject); // true $float = false; // TypeError","title":"box"},{"location":"types/float-object.html#fromprimitive","text":"Attempts to create a FloatObject from a primitive value. Throws error if non_numeric passed. ::fromPrimitive(mixed $mixed, ?int $precision = null): FloatObject Usage : $float = FloatObject::fromPrimitive('4.04'); assert($float instanceof FloatObject); // true $float = FloatObject::fromPrimitive(false); // TypeError","title":"fromPrimitive"},{"location":"types/int-object.html","text":"IntObject \u00b6 Primitive Type: int , integer Usage \u00b6 Provides an interface for a lot of internal operations and functions on integers. Example use Typing\\Type\\IntObject; use Exception; $float = new IntObject(4.5); if (8.0 !== $float->plus(3.5)->getScalarValue()) { throw new Exception('Bad math!'); } Extensions \u00b6 This section is optional. If you don't care about customizing the extensions, simply go on to the methods section. By default, the order of extension loading is as follows: /** * @return MathLibraryInterface[] */ protected function getDefaultDelegates(): array { //Array is sorted in order of preference. Override in child class if so desired. return [ 'bcmath' => new BcMath($this->getRoundingStrategy()), 'gmp' => new Gmp(), 'spl' => new Spl($this->getRoundingStrategy()), ]; } You do not need to actually have any of these extensions installed. If one fails, or is not enabled,it will simply go to the next, behaving like a chain, until it finds a library that can perform the operation. If you want to only use specific libraries when using NumberTypes (Float | Int), then you need to pass it an instance of a MathAdapter that only contains those libraries. use Typing\\Math\\DefaultMathAdapter; use Typing\\Math\\Library\\BcMath; use Typing\\Math\\Library\\MathLibraryInterface; use Typing\\Math\\Library\\Spl; use Typing\\Type\\Collection; $libraries = new Collection(array: [ new BcMath(), new Spl(), ], type: MathLibraryInterface::class); $adapter = new DefaultMathAdapter(delegates: $libraries) $float = new IntObject(float: 5.0, adapter: $adapter); I am working on implementing a symfony bundle, so the library can be customized without so much verbosity. For other frameworks, PRs are welcome! BCMath \u00b6 Make sure the BCMath extension (often php-bcmath ) is installed and enabled if you'd like IntObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes. Gmp \u00b6 Make sure the GMP extension (often php-gmp ) is installed and enabled if you'd like IntObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes. Spl \u00b6 This is just standard php arithmetic without any special operations. Methods \u00b6 Instance \u00b6 plus \u00b6 Adds a number to the current instance. plus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(3.0); assert(6.2 == $float->plus(3.2)->getScalarValue()); // true minus \u00b6 Subtracts a number from the current instance. minus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(7.0); assert(2.8 == $float->minus(4.2)->getScalarValue()); // true multipliedBy \u00b6 Multiplies the current instance by a number. multipliedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(2.0); assert(20.0 == $float->multipliedBy(10)->getScalarValue()); // true dividedBy \u00b6 Divides the current instance by a number. dividedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(10.0); assert(2.0 == $float->dividedBy(5)->getScalarValue()); // true compare \u00b6 Compares the current instance to the param passed. Same rules as spaceship <=> or version_compare for return values. compare(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(10.0); assert(1 == $float->compare(5)->getScalarValue()); // true modulo \u00b6 Returns the remainder of the instance divided by the param. modulo(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(55.3); assert(5.3 == $float->modulo(10)->getScalarValue()); // true $float = new IntObject(10.0); assert (0 == $float->modulo(2)->getScalarValue()); // true power \u00b6 Returns instance to the power of param. power(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true squareRoot \u00b6 Returns the instance's square root. squareRoot(): NumberObjectInterface; Usage : $float = new IntObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true absolute \u00b6 Returns the instance's absolute value. absolute(): NumberObjectInterface; Usage : $float = new IntObject(-15.5); assert(15.5 == $float->absolute()->getScalarValue()); // true negate \u00b6 Returns the instance's opposite value. negate(): NumberObjectInterface; Usage : $float = new IntObject(-15.5); assert(15.5 == $float->negate()->getScalarValue()); // true $float = new IntObject(77.5); assert(-77.5 == $float->negate()->getScalarValue()); // true factorial \u00b6 Returns the factorial value for instance. Arguments must be whole, positive numbers. factorial(): NumberObjectInterface; Usage : $float = new IntObject(10.0); assert(3628800 == $float->factorial()->getScalarValue()); // true $float = new IntObject(10.1); $float->factorial(); // InvalidNumberException $float = new IntObject(-10.0); $float->factorial(); // InvalidNumberException gcd \u00b6 Returns the greatest common divider between the current instance and argument. gcd(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true root \u00b6 Extension Required php-gmp must be installed for this method to work. Takes the nth root of the current instance and returns the integer component of the result. root(int $num): NumberObjectInterface Usage : $float = new IntObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true getNextPrime \u00b6 Return the next prime number after current instance's value. getNextPrime(): NumberObjectInterface; Usage : $float = new IntObject(5.0); assert(7 == $float->getNextPrime()->getScalarValue()); // true isPrime \u00b6 Returns true if the current instance is a prime number. isPrime(): bool; Usage : $float = new IntObject(5.0); assert($float->isPrime()); // true $float = new IntObject(6.0); assert($float->isPrime()); // false isPerfectSquare \u00b6 Returns true if the current instance is a perfect square. isPerfectSquare(): bool; Usage : $float = new IntObject(4.0); assert($float->isPerfectSquare()); // true $float = new IntObject(6.0); assert($float->isPerfectSquare()); // false $float = new IntObject(9.0); assert($float->isPerfectSquare()); // true getPrecision \u00b6 Gets the current precision. If null was passed, then it calculates the precision. getPrecision(): int; Usage : $float = new IntObject(4.0); assert(1 === $float->getPrecision()); // true $float = new IntObject(6.038); assert(3 === $float->getPrecision()); // false $float = new IntObject(9.0); assert($float->isPerfectSquare()); // true toIntObject \u00b6 Converts the current instance to an IntObject. toIntObject(): IntObject; Usage : $float = new IntObject(4.05); assert(new IntObject(4) == $float->toIntObject()); // true toInt \u00b6 Converts the current instance to a primitive int. toInt(): int; Usage : $float = new IntObject(4.04); assert(4 === $float->toInt()); // true toStringObject \u00b6 Converts the current instance to a StringObject. toStringObject(): StringObject; Usage : $float = new IntObject(4.05); assert(new StringObject('4.05') == $float->toStringObject()); // true toString \u00b6 Converts the current instance to a primitive string. toString(): string; Usage : $float = new IntObject(4.04); assert('4.04' === $float->toString()); // true Static \u00b6 box \u00b6 Boxes a given variable to IntObject instances. ::box(mixed &$pointer) Usage : $float = new IntObject(4.04); IntObject::box($float); $float = 7.77; assert($float instanceof IntObject); // true $float = false; // TypeError fromPrimitive \u00b6 Attempts to create a IntObject from a primitive value. Throws error if non_numeric passed. ::fromPrimitive(mixed $mixed, ?int $precision = null): IntObject Usage : $float = IntObject::fromPrimitive('4.04'); assert($float instanceof IntObject); // true $float = IntObject::fromPrimitive(false); // TypeError","title":"IntObject"},{"location":"types/int-object.html#intobject","text":"Primitive Type: int , integer","title":"IntObject"},{"location":"types/int-object.html#usage","text":"Provides an interface for a lot of internal operations and functions on integers. Example use Typing\\Type\\IntObject; use Exception; $float = new IntObject(4.5); if (8.0 !== $float->plus(3.5)->getScalarValue()) { throw new Exception('Bad math!'); }","title":"Usage"},{"location":"types/int-object.html#extensions","text":"This section is optional. If you don't care about customizing the extensions, simply go on to the methods section. By default, the order of extension loading is as follows: /** * @return MathLibraryInterface[] */ protected function getDefaultDelegates(): array { //Array is sorted in order of preference. Override in child class if so desired. return [ 'bcmath' => new BcMath($this->getRoundingStrategy()), 'gmp' => new Gmp(), 'spl' => new Spl($this->getRoundingStrategy()), ]; } You do not need to actually have any of these extensions installed. If one fails, or is not enabled,it will simply go to the next, behaving like a chain, until it finds a library that can perform the operation. If you want to only use specific libraries when using NumberTypes (Float | Int), then you need to pass it an instance of a MathAdapter that only contains those libraries. use Typing\\Math\\DefaultMathAdapter; use Typing\\Math\\Library\\BcMath; use Typing\\Math\\Library\\MathLibraryInterface; use Typing\\Math\\Library\\Spl; use Typing\\Type\\Collection; $libraries = new Collection(array: [ new BcMath(), new Spl(), ], type: MathLibraryInterface::class); $adapter = new DefaultMathAdapter(delegates: $libraries) $float = new IntObject(float: 5.0, adapter: $adapter); I am working on implementing a symfony bundle, so the library can be customized without so much verbosity. For other frameworks, PRs are welcome!","title":"Extensions"},{"location":"types/int-object.html#bcmath","text":"Make sure the BCMath extension (often php-bcmath ) is installed and enabled if you'd like IntObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes.","title":"BCMath"},{"location":"types/int-object.html#gmp","text":"Make sure the GMP extension (often php-gmp ) is installed and enabled if you'd like IntObjects to use this library when performing arithmetic. Some methods are decorated instead of direct proxies to the library for compatibility purposes.","title":"Gmp"},{"location":"types/int-object.html#spl","text":"This is just standard php arithmetic without any special operations.","title":"Spl"},{"location":"types/int-object.html#methods","text":"","title":"Methods"},{"location":"types/int-object.html#instance","text":"","title":"Instance"},{"location":"types/int-object.html#plus","text":"Adds a number to the current instance. plus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(3.0); assert(6.2 == $float->plus(3.2)->getScalarValue()); // true","title":"plus"},{"location":"types/int-object.html#minus","text":"Subtracts a number from the current instance. minus(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(7.0); assert(2.8 == $float->minus(4.2)->getScalarValue()); // true","title":"minus"},{"location":"types/int-object.html#multipliedby","text":"Multiplies the current instance by a number. multipliedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(2.0); assert(20.0 == $float->multipliedBy(10)->getScalarValue()); // true","title":"multipliedBy"},{"location":"types/int-object.html#dividedby","text":"Divides the current instance by a number. dividedBy(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(10.0); assert(2.0 == $float->dividedBy(5)->getScalarValue()); // true","title":"dividedBy"},{"location":"types/int-object.html#compare","text":"Compares the current instance to the param passed. Same rules as spaceship <=> or version_compare for return values. compare(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(10.0); assert(1 == $float->compare(5)->getScalarValue()); // true","title":"compare"},{"location":"types/int-object.html#modulo","text":"Returns the remainder of the instance divided by the param. modulo(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(55.3); assert(5.3 == $float->modulo(10)->getScalarValue()); // true $float = new IntObject(10.0); assert (0 == $float->modulo(2)->getScalarValue()); // true","title":"modulo"},{"location":"types/int-object.html#power","text":"Returns instance to the power of param. power(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true","title":"power"},{"location":"types/int-object.html#squareroot","text":"Returns the instance's square root. squareRoot(): NumberObjectInterface; Usage : $float = new IntObject(10); assert(31622776.6 == $float->power(7.5)->getScalarValue()); // true","title":"squareRoot"},{"location":"types/int-object.html#absolute","text":"Returns the instance's absolute value. absolute(): NumberObjectInterface; Usage : $float = new IntObject(-15.5); assert(15.5 == $float->absolute()->getScalarValue()); // true","title":"absolute"},{"location":"types/int-object.html#negate","text":"Returns the instance's opposite value. negate(): NumberObjectInterface; Usage : $float = new IntObject(-15.5); assert(15.5 == $float->negate()->getScalarValue()); // true $float = new IntObject(77.5); assert(-77.5 == $float->negate()->getScalarValue()); // true","title":"negate"},{"location":"types/int-object.html#factorial","text":"Returns the factorial value for instance. Arguments must be whole, positive numbers. factorial(): NumberObjectInterface; Usage : $float = new IntObject(10.0); assert(3628800 == $float->factorial()->getScalarValue()); // true $float = new IntObject(10.1); $float->factorial(); // InvalidNumberException $float = new IntObject(-10.0); $float->factorial(); // InvalidNumberException","title":"factorial"},{"location":"types/int-object.html#gcd","text":"Returns the greatest common divider between the current instance and argument. gcd(StringObject | NumberObjectInterface | string | float | int $num): NumberObjectInterface; Usage : $float = new IntObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true","title":"gcd"},{"location":"types/int-object.html#root","text":"Extension Required php-gmp must be installed for this method to work. Takes the nth root of the current instance and returns the integer component of the result. root(int $num): NumberObjectInterface Usage : $float = new IntObject(50.0); assert(10 == $float->gcd(10)->getScalarValue()); // true","title":"root"},{"location":"types/int-object.html#getnextprime","text":"Return the next prime number after current instance's value. getNextPrime(): NumberObjectInterface; Usage : $float = new IntObject(5.0); assert(7 == $float->getNextPrime()->getScalarValue()); // true","title":"getNextPrime"},{"location":"types/int-object.html#isprime","text":"Returns true if the current instance is a prime number. isPrime(): bool; Usage : $float = new IntObject(5.0); assert($float->isPrime()); // true $float = new IntObject(6.0); assert($float->isPrime()); // false","title":"isPrime"},{"location":"types/int-object.html#isperfectsquare","text":"Returns true if the current instance is a perfect square. isPerfectSquare(): bool; Usage : $float = new IntObject(4.0); assert($float->isPerfectSquare()); // true $float = new IntObject(6.0); assert($float->isPerfectSquare()); // false $float = new IntObject(9.0); assert($float->isPerfectSquare()); // true","title":"isPerfectSquare"},{"location":"types/int-object.html#getprecision","text":"Gets the current precision. If null was passed, then it calculates the precision. getPrecision(): int; Usage : $float = new IntObject(4.0); assert(1 === $float->getPrecision()); // true $float = new IntObject(6.038); assert(3 === $float->getPrecision()); // false $float = new IntObject(9.0); assert($float->isPerfectSquare()); // true","title":"getPrecision"},{"location":"types/int-object.html#tointobject","text":"Converts the current instance to an IntObject. toIntObject(): IntObject; Usage : $float = new IntObject(4.05); assert(new IntObject(4) == $float->toIntObject()); // true","title":"toIntObject"},{"location":"types/int-object.html#toint","text":"Converts the current instance to a primitive int. toInt(): int; Usage : $float = new IntObject(4.04); assert(4 === $float->toInt()); // true","title":"toInt"},{"location":"types/int-object.html#tostringobject","text":"Converts the current instance to a StringObject. toStringObject(): StringObject; Usage : $float = new IntObject(4.05); assert(new StringObject('4.05') == $float->toStringObject()); // true","title":"toStringObject"},{"location":"types/int-object.html#tostring","text":"Converts the current instance to a primitive string. toString(): string; Usage : $float = new IntObject(4.04); assert('4.04' === $float->toString()); // true","title":"toString"},{"location":"types/int-object.html#static","text":"","title":"Static"},{"location":"types/int-object.html#box","text":"Boxes a given variable to IntObject instances. ::box(mixed &$pointer) Usage : $float = new IntObject(4.04); IntObject::box($float); $float = 7.77; assert($float instanceof IntObject); // true $float = false; // TypeError","title":"box"},{"location":"types/int-object.html#fromprimitive","text":"Attempts to create a IntObject from a primitive value. Throws error if non_numeric passed. ::fromPrimitive(mixed $mixed, ?int $precision = null): IntObject Usage : $float = IntObject::fromPrimitive('4.04'); assert($float instanceof IntObject); // true $float = IntObject::fromPrimitive(false); // TypeError","title":"fromPrimitive"},{"location":"types/string-object.html","text":"StringObject \u00b6 Primitive Type: string Credits \u00b6 Doctrine/Inflector is used for inflection related methods While Stringy is no longer maintained, the base class is pulled into our repo as an abstract class to maintain as a permanent fork. cocur/slugify is used for Slugifying strings. Usage \u00b6 Provides an interface for a string operations. Multibyte support. Example use Typing\\Type\\StringObject; $string = new StringObject(''); Methods \u00b6 Instance \u00b6 append \u00b6 at \u00b6 between \u00b6 chars \u00b6 collapseWhitespace \u00b6 contains \u00b6 containsAll \u00b6 containsAny \u00b6 count \u00b6 countSubstr \u00b6 dasherize \u00b6 delimit \u00b6 endsWith \u00b6 endsWithAny \u00b6 ensureLeft \u00b6 ensureRight \u00b6 first \u00b6 getEncoding \u00b6 getIterator \u00b6 hasLowerCase \u00b6 hasUpperCase \u00b6 htmlDecode \u00b6 htmlEncode \u00b6 humanize \u00b6 indexOf \u00b6 indexOfLast \u00b6 insert \u00b6 isAlpha \u00b6 isAlphanumeric \u00b6 isBlank \u00b6 isHexadecimal \u00b6 isJson \u00b6 isLowerCase \u00b6 isSerialized \u00b6 isBase64 \u00b6 isUpperCase \u00b6 last \u00b6 length \u00b6 longestCommonPrefix \u00b6 longestCommonSuffix \u00b6 longestCommonSubstring \u00b6 lowerCaseFirst \u00b6 offsetExists \u00b6 offsetGet \u00b6 offsetSet \u00b6 offsetUnset \u00b6 pad \u00b6 padBoth \u00b6 padLeft \u00b6 padRight \u00b6 prepend \u00b6 regexReplace \u00b6 removeLeft \u00b6 removeRight \u00b6 repeat \u00b6 replace \u00b6 reverse \u00b6 safeTruncate \u00b6 shuffle \u00b6 startsWith \u00b6 startsWithAny \u00b6 slice \u00b6 split \u00b6 lines \u00b6 stripWhitespace \u00b6 substr \u00b6 surround \u00b6 swapCase \u00b6 tidy \u00b6 titleize \u00b6 toAscii \u00b6 toLowerCase \u00b6 toSpaces \u00b6 toTabs \u00b6 toTitleCase \u00b6 toUpperCase \u00b6 trim \u00b6 trimLeft \u00b6 trimRight \u00b6 truncate \u00b6 underscored \u00b6 upperCaseFirst \u00b6 __toString \u00b6 getScalarValue \u00b6 explode \u00b6 isEmpty \u00b6 slugify \u00b6 normalize \u00b6 urlize \u00b6 classify \u00b6 upperCamelize \u00b6 tableize \u00b6 capitilize \u00b6 camelize \u00b6 pluralize \u00b6 singularize \u00b6 strpos \u00b6 strrpos \u00b6 isSemVer \u00b6 toDateTime \u00b6 subStrUntil \u00b6 subStrAfter \u00b6 toArray \u00b6 toCollection \u00b6 toInt \u00b6 toIntObject \u00b6 toBool \u00b6 toBoolObject \u00b6 Static \u00b6 box \u00b6 create \u00b6 fromPrimitive \u00b6","title":"StringObject"},{"location":"types/string-object.html#stringobject","text":"Primitive Type: string","title":"StringObject"},{"location":"types/string-object.html#credits","text":"Doctrine/Inflector is used for inflection related methods While Stringy is no longer maintained, the base class is pulled into our repo as an abstract class to maintain as a permanent fork. cocur/slugify is used for Slugifying strings.","title":"Credits"},{"location":"types/string-object.html#usage","text":"Provides an interface for a string operations. Multibyte support. Example use Typing\\Type\\StringObject; $string = new StringObject('');","title":"Usage"},{"location":"types/string-object.html#methods","text":"","title":"Methods"},{"location":"types/string-object.html#instance","text":"","title":"Instance"},{"location":"types/string-object.html#append","text":"","title":"append"},{"location":"types/string-object.html#at","text":"","title":"at"},{"location":"types/string-object.html#between","text":"","title":"between"},{"location":"types/string-object.html#chars","text":"","title":"chars"},{"location":"types/string-object.html#collapsewhitespace","text":"","title":"collapseWhitespace"},{"location":"types/string-object.html#contains","text":"","title":"contains"},{"location":"types/string-object.html#containsall","text":"","title":"containsAll"},{"location":"types/string-object.html#containsany","text":"","title":"containsAny"},{"location":"types/string-object.html#count","text":"","title":"count"},{"location":"types/string-object.html#countsubstr","text":"","title":"countSubstr"},{"location":"types/string-object.html#dasherize","text":"","title":"dasherize"},{"location":"types/string-object.html#delimit","text":"","title":"delimit"},{"location":"types/string-object.html#endswith","text":"","title":"endsWith"},{"location":"types/string-object.html#endswithany","text":"","title":"endsWithAny"},{"location":"types/string-object.html#ensureleft","text":"","title":"ensureLeft"},{"location":"types/string-object.html#ensureright","text":"","title":"ensureRight"},{"location":"types/string-object.html#first","text":"","title":"first"},{"location":"types/string-object.html#getencoding","text":"","title":"getEncoding"},{"location":"types/string-object.html#getiterator","text":"","title":"getIterator"},{"location":"types/string-object.html#haslowercase","text":"","title":"hasLowerCase"},{"location":"types/string-object.html#hasuppercase","text":"","title":"hasUpperCase"},{"location":"types/string-object.html#htmldecode","text":"","title":"htmlDecode"},{"location":"types/string-object.html#htmlencode","text":"","title":"htmlEncode"},{"location":"types/string-object.html#humanize","text":"","title":"humanize"},{"location":"types/string-object.html#indexof","text":"","title":"indexOf"},{"location":"types/string-object.html#indexoflast","text":"","title":"indexOfLast"},{"location":"types/string-object.html#insert","text":"","title":"insert"},{"location":"types/string-object.html#isalpha","text":"","title":"isAlpha"},{"location":"types/string-object.html#isalphanumeric","text":"","title":"isAlphanumeric"},{"location":"types/string-object.html#isblank","text":"","title":"isBlank"},{"location":"types/string-object.html#ishexadecimal","text":"","title":"isHexadecimal"},{"location":"types/string-object.html#isjson","text":"","title":"isJson"},{"location":"types/string-object.html#islowercase","text":"","title":"isLowerCase"},{"location":"types/string-object.html#isserialized","text":"","title":"isSerialized"},{"location":"types/string-object.html#isbase64","text":"","title":"isBase64"},{"location":"types/string-object.html#isuppercase","text":"","title":"isUpperCase"},{"location":"types/string-object.html#last","text":"","title":"last"},{"location":"types/string-object.html#length","text":"","title":"length"},{"location":"types/string-object.html#longestcommonprefix","text":"","title":"longestCommonPrefix"},{"location":"types/string-object.html#longestcommonsuffix","text":"","title":"longestCommonSuffix"},{"location":"types/string-object.html#longestcommonsubstring","text":"","title":"longestCommonSubstring"},{"location":"types/string-object.html#lowercasefirst","text":"","title":"lowerCaseFirst"},{"location":"types/string-object.html#offsetexists","text":"","title":"offsetExists"},{"location":"types/string-object.html#offsetget","text":"","title":"offsetGet"},{"location":"types/string-object.html#offsetset","text":"","title":"offsetSet"},{"location":"types/string-object.html#offsetunset","text":"","title":"offsetUnset"},{"location":"types/string-object.html#pad","text":"","title":"pad"},{"location":"types/string-object.html#padboth","text":"","title":"padBoth"},{"location":"types/string-object.html#padleft","text":"","title":"padLeft"},{"location":"types/string-object.html#padright","text":"","title":"padRight"},{"location":"types/string-object.html#prepend","text":"","title":"prepend"},{"location":"types/string-object.html#regexreplace","text":"","title":"regexReplace"},{"location":"types/string-object.html#removeleft","text":"","title":"removeLeft"},{"location":"types/string-object.html#removeright","text":"","title":"removeRight"},{"location":"types/string-object.html#repeat","text":"","title":"repeat"},{"location":"types/string-object.html#replace","text":"","title":"replace"},{"location":"types/string-object.html#reverse","text":"","title":"reverse"},{"location":"types/string-object.html#safetruncate","text":"","title":"safeTruncate"},{"location":"types/string-object.html#shuffle","text":"","title":"shuffle"},{"location":"types/string-object.html#startswith","text":"","title":"startsWith"},{"location":"types/string-object.html#startswithany","text":"","title":"startsWithAny"},{"location":"types/string-object.html#slice","text":"","title":"slice"},{"location":"types/string-object.html#split","text":"","title":"split"},{"location":"types/string-object.html#lines","text":"","title":"lines"},{"location":"types/string-object.html#stripwhitespace","text":"","title":"stripWhitespace"},{"location":"types/string-object.html#substr","text":"","title":"substr"},{"location":"types/string-object.html#surround","text":"","title":"surround"},{"location":"types/string-object.html#swapcase","text":"","title":"swapCase"},{"location":"types/string-object.html#tidy","text":"","title":"tidy"},{"location":"types/string-object.html#titleize","text":"","title":"titleize"},{"location":"types/string-object.html#toascii","text":"","title":"toAscii"},{"location":"types/string-object.html#tolowercase","text":"","title":"toLowerCase"},{"location":"types/string-object.html#tospaces","text":"","title":"toSpaces"},{"location":"types/string-object.html#totabs","text":"","title":"toTabs"},{"location":"types/string-object.html#totitlecase","text":"","title":"toTitleCase"},{"location":"types/string-object.html#touppercase","text":"","title":"toUpperCase"},{"location":"types/string-object.html#trim","text":"","title":"trim"},{"location":"types/string-object.html#trimleft","text":"","title":"trimLeft"},{"location":"types/string-object.html#trimright","text":"","title":"trimRight"},{"location":"types/string-object.html#truncate","text":"","title":"truncate"},{"location":"types/string-object.html#underscored","text":"","title":"underscored"},{"location":"types/string-object.html#uppercasefirst","text":"","title":"upperCaseFirst"},{"location":"types/string-object.html#__tostring","text":"","title":"__toString"},{"location":"types/string-object.html#getscalarvalue","text":"","title":"getScalarValue"},{"location":"types/string-object.html#explode","text":"","title":"explode"},{"location":"types/string-object.html#isempty","text":"","title":"isEmpty"},{"location":"types/string-object.html#slugify","text":"","title":"slugify"},{"location":"types/string-object.html#normalize","text":"","title":"normalize"},{"location":"types/string-object.html#urlize","text":"","title":"urlize"},{"location":"types/string-object.html#classify","text":"","title":"classify"},{"location":"types/string-object.html#uppercamelize","text":"","title":"upperCamelize"},{"location":"types/string-object.html#tableize","text":"","title":"tableize"},{"location":"types/string-object.html#capitilize","text":"","title":"capitilize"},{"location":"types/string-object.html#camelize","text":"","title":"camelize"},{"location":"types/string-object.html#pluralize","text":"","title":"pluralize"},{"location":"types/string-object.html#singularize","text":"","title":"singularize"},{"location":"types/string-object.html#strpos","text":"","title":"strpos"},{"location":"types/string-object.html#strrpos","text":"","title":"strrpos"},{"location":"types/string-object.html#issemver","text":"","title":"isSemVer"},{"location":"types/string-object.html#todatetime","text":"","title":"toDateTime"},{"location":"types/string-object.html#substruntil","text":"","title":"subStrUntil"},{"location":"types/string-object.html#substrafter","text":"","title":"subStrAfter"},{"location":"types/string-object.html#toarray","text":"","title":"toArray"},{"location":"types/string-object.html#tocollection","text":"","title":"toCollection"},{"location":"types/string-object.html#toint","text":"","title":"toInt"},{"location":"types/string-object.html#tointobject","text":"","title":"toIntObject"},{"location":"types/string-object.html#tobool","text":"","title":"toBool"},{"location":"types/string-object.html#toboolobject","text":"","title":"toBoolObject"},{"location":"types/string-object.html#static","text":"","title":"Static"},{"location":"types/string-object.html#box","text":"","title":"box"},{"location":"types/string-object.html#create","text":"","title":"create"},{"location":"types/string-object.html#fromprimitive","text":"","title":"fromPrimitive"}]}